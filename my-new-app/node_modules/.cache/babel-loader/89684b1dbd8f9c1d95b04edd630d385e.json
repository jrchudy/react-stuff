{"ast":null,"code":"import _slicedToArray from\"/Users/jchudy/workspace/react-stuff/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TableHeader=function TableHeader(props){var _useState=useState(25),_useState2=_slicedToArray(_useState,2),selectedPageLimit=_useState2[0],setSelectedPageLimit=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isLoaded=_useState4[0],setIsLoaded=_useState4[1];var _useState5=useState('XXX'),_useState6=_slicedToArray(_useState5,2),aggCount=_useState6[0],setAggCount=_useState6[1];// is never going to change\nvar pageLimits=[10,25,50,75,100,200];// component mounted\nuseEffect(function(){// do nothing currently since has to wait for reference to resolve\n},[]);// NOTE: replace with useEffect that watches reference store variable\n// when reference store variable is set or changes, make request to fetch agg count\n// shouldComponentUpdate: function (nextProps, nextState) {\n//     // console.log(\"TableHeader should update\")\n//     // console.log(\"next props: \", nextProps);\n//     // console.log(\"next state: \", nextState);\n//\n//     var referenceChanged = this.state.reference != nextProps.reference;\n//     return referenceChanged;\n// },\nvar renderCountHeader=function renderCountHeader(){if(isLoaded){return aggCount;}};var renderPageLimits=function renderPageLimits(){// <span className={\"glyphicon pull-right \" + this.state.selectedPageLimit === limit ? 'glyphicon-ok' : 'glyphicon-invisible'}></span>\nreturn pageLimits.map(function(limit,index){return/*#__PURE__*/_jsx(\"option\",{className:\"page-size-limit-${limit}\",children:limit},index);});};var handlePageLimitChange=function handlePageLimitChange(value){console.log(value);// dispatch to store that reference should be reread\n};// TODO: replace select\n// <span className=\"caret\"></span>\nreturn/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"span\",{children:[\"Displaying first \",/*#__PURE__*/_jsx(\"select\",{className:\"page-size-dropdown chaise-btn chaise-btn-secondary\",value:selectedPageLimit,onChange:function onChange(event){return handlePageLimitChange(event.target.value);},children:renderPageLimits()}),\" of \",renderCountHeader(),\" records\"]})});};export default TableHeader;","map":{"version":3,"sources":["/Users/jchudy/workspace/react-stuff/my-app/src/components/TableHeader.js"],"names":["React","useEffect","useState","TableHeader","props","selectedPageLimit","setSelectedPageLimit","isLoaded","setIsLoaded","aggCount","setAggCount","pageLimits","renderCountHeader","renderPageLimits","map","limit","index","handlePageLimitChange","value","console","log","event","target"],"mappings":"iKAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,C,wFAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC3B,cAAkDF,QAAQ,CAAC,EAAD,CAA1D,wCAAOG,iBAAP,eAA0BC,oBAA1B,eACA,eAAkDJ,QAAQ,CAAC,KAAD,CAA1D,yCAAOK,QAAP,eAAiBC,WAAjB,eACA,eAAkDN,QAAQ,CAAC,KAAD,CAA1D,yCAAOO,QAAP,eAAiBC,WAAjB,eAEA;AACA,GAAMC,CAAAA,UAAU,CAAG,CAAC,EAAD,CAAK,EAAL,CAAS,EAAT,CAAa,EAAb,CAAiB,GAAjB,CAAsB,GAAtB,CAAnB,CAGA;AACAV,SAAS,CAAC,UAAM,CACZ;AACH,CAFQ,CAEN,EAFM,CAAT,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMW,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC5B,GAAIL,QAAJ,CAAc,CACV,MAAOE,CAAAA,QAAP,CACH,CACJ,CAJD,CAMA,GAAMI,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CAC3B;AACA,MAAOF,CAAAA,UAAU,CAACG,GAAX,CAAe,SAACC,KAAD,CAAQC,KAAR,CAAkB,CACpC,mBAAQ,eAAoB,SAAS,CAAE,0BAA/B,UAA4DD,KAA5D,EAAaC,KAAb,CAAR,CACH,CAFM,CAAP,CAGH,CALD,CAOA,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,KAAD,CAAW,CACrCC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACA;AACH,CAHD,CAKA;AACA;AACA,mBAAO,kCACH,yDAAuB,eAAQ,SAAS,CAAC,oDAAlB,CAAuE,KAAK,CAAEb,iBAA9E,CAAiG,QAAQ,CAAE,kBAAAgB,KAAK,QAAIJ,CAAAA,qBAAqB,CAACI,KAAK,CAACC,MAAN,CAAaJ,KAAd,CAAzB,EAAhH,UACtBL,gBAAgB,EADM,EAAvB,QAEcD,iBAAiB,EAF/B,cADG,EAAP,CAKH,CAlDD,CAoDA,cAAeT,CAAAA,WAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst TableHeader = (props) => {\n    const [selectedPageLimit, setSelectedPageLimit] = useState(25);\n    const [isLoaded, setIsLoaded]                   = useState(false);\n    const [aggCount, setAggCount]                   = useState('XXX');\n\n    // is never going to change\n    const pageLimits = [10, 25, 50, 75, 100, 200];\n\n\n    // component mounted\n    useEffect(() => {\n        // do nothing currently since has to wait for reference to resolve\n    }, []);\n\n    // NOTE: replace with useEffect that watches reference store variable\n    // when reference store variable is set or changes, make request to fetch agg count\n    // shouldComponentUpdate: function (nextProps, nextState) {\n    //     // console.log(\"TableHeader should update\")\n    //     // console.log(\"next props: \", nextProps);\n    //     // console.log(\"next state: \", nextState);\n    //\n    //     var referenceChanged = this.state.reference != nextProps.reference;\n    //     return referenceChanged;\n    // },\n\n    const renderCountHeader = () => {\n        if (isLoaded) {\n            return aggCount\n        }\n    }\n\n    const renderPageLimits = () => {\n        // <span className={\"glyphicon pull-right \" + this.state.selectedPageLimit === limit ? 'glyphicon-ok' : 'glyphicon-invisible'}></span>\n        return pageLimits.map((limit, index) => {\n            return (<option key={index} className={\"page-size-limit-${limit}\"}>{limit}</option>)\n        })\n    }\n\n    const handlePageLimitChange = (value) => {\n        console.log(value)\n        // dispatch to store that reference should be reread\n    }\n\n    // TODO: replace select\n    // <span className=\"caret\"></span>\n    return(<div>\n        <span>Displaying first <select className=\"page-size-dropdown chaise-btn chaise-btn-secondary\" value={selectedPageLimit} onChange={event => handlePageLimitChange(event.target.value)}>\n        {renderPageLimits()}\n        </select> of {renderCountHeader()} records</span>\n    </div>);\n}\n\nexport default TableHeader;\n"]},"metadata":{},"sourceType":"module"}