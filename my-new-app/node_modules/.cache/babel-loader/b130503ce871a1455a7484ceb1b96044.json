{"ast":null,"code":"import _slicedToArray from\"/Users/jchudy/workspace/react-stuff/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import Axios from'axios';import{useDispatch,useSelector}from'react-redux';import store from'../redux/store';// NOTE: not sure how to use this instead of 'reference/setReference'\nimport{setReference,setPage}from'../redux/features/referenceSlice';import{jsx as _jsx}from\"react/jsx-runtime\";var Record=function Record(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoaded=_useState2[0],setIsLoaded=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),reference=_useState4[0],setReference=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),page=_useState6[0],setPage=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),tuple=_useState8[0],setTuple=_useState8[1];var dispatch=useDispatch();// gets the named reducer from the store, see redux/store\nvar referenceStore=useSelector(function(state){return state.reference;});// component mounted, fetch the initial reference and read the data\nuseEffect(function(){console.log(\"Record mounted\");},[]);// reference updated from store\nuseEffect(function(){if(referenceStore&&referenceStore.reference!=reference){setIsLoaded(false);setPageSize(referenceStore.pageSize);var refToRead=referenceStore.reference;setReference(refToRead);refToRead.read(1).then(function(newPage){setPage(newPage);store.dispatch({type:\"reference/setPage\",refPage:newPage});setTuple(newPage.tuples[0]);setIsLoaded(true);});}},[referenceStore,dispatch]);var renderDisplayName=function renderDisplayName(){if(isLoaded){var displaynameObj=reference.displayname;return/*#__PURE__*/_jsx(\"h2\",{children:displaynameObj.isHTML?/*#__PURE__*/_jsx(\"span\",{className:\"markdown-container\",dangerouslySetInnerHTML:{__html:displaynameObj.value}}):/*#__PURE__*/_jsx(\"span\",{children:displaynameObj.value})});}};return/*#__PURE__*/_jsx(\"div\",{children:renderDisplayName()});};export default Record;","map":{"version":3,"sources":["/Users/jchudy/workspace/react-stuff/my-app/src/components/Record.js"],"names":["React","useEffect","useState","Axios","useDispatch","useSelector","store","setReference","setPage","Record","props","isLoaded","setIsLoaded","reference","page","tuple","setTuple","dispatch","referenceStore","state","console","log","setPageSize","pageSize","refToRead","read","then","newPage","type","refPage","tuples","renderDisplayName","displaynameObj","displayname","isHTML","__html","value"],"mappings":"iKAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,MAAOC,CAAAA,KAAP,KAAkB,gBAAlB,CAEA;AACA,OAASC,YAAT,CAAuBC,OAAvB,KAAsC,kCAAtC,C,2CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,KAAD,CAAW,CACtB,cAAkCR,QAAQ,CAAC,KAAD,CAA1C,wCAAOS,QAAP,eAAiBC,WAAjB,eACA,eAAkCV,QAAQ,CAAC,IAAD,CAA1C,yCAAOW,SAAP,eAAkBN,YAAlB,eACA,eAAkCL,QAAQ,CAAC,IAAD,CAA1C,yCAAOY,IAAP,eAAaN,OAAb,eACA,eAAkCN,QAAQ,CAAC,IAAD,CAA1C,yCAAOa,KAAP,eAAcC,QAAd,eAEA,GAAMC,CAAAA,QAAQ,CAAGb,WAAW,EAA5B,CACA;AACA,GAAMc,CAAAA,cAAc,CAAGb,WAAW,CAAC,SAAAc,KAAK,QAAIA,CAAAA,KAAK,CAACN,SAAV,EAAN,CAAlC,CAEA;AACAZ,SAAS,CAAC,UAAM,CACZmB,OAAO,CAACC,GAAR,CAAY,gBAAZ,EACH,CAFQ,CAEN,EAFM,CAAT,CAIA;AACApB,SAAS,CAAC,UAAM,CACZ,GAAIiB,cAAc,EAAKA,cAAc,CAACL,SAAf,EAA4BA,SAAnD,CAA+D,CAC3DD,WAAW,CAAC,KAAD,CAAX,CACAU,WAAW,CAACJ,cAAc,CAACK,QAAhB,CAAX,CAEA,GAAIC,CAAAA,SAAS,CAAGN,cAAc,CAACL,SAA/B,CACAN,YAAY,CAACiB,SAAD,CAAZ,CAEAA,SAAS,CAACC,IAAV,CAAe,CAAf,EAAkBC,IAAlB,CAAuB,SAAUC,OAAV,CAAmB,CAEtCnB,OAAO,CAACmB,OAAD,CAAP,CACArB,KAAK,CAACW,QAAN,CAAe,CAAEW,IAAI,CAAE,mBAAR,CAA6BC,OAAO,CAAEF,OAAtC,CAAf,EAEAX,QAAQ,CAACW,OAAO,CAACG,MAAR,CAAe,CAAf,CAAD,CAAR,CACAlB,WAAW,CAAC,IAAD,CAAX,CACH,CAPD,EAQH,CACJ,CAjBQ,CAiBN,CAACM,cAAD,CAAiBD,QAAjB,CAjBM,CAAT,CAmBA,GAAMc,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC5B,GAAIpB,QAAJ,CAAc,CACV,GAAIqB,CAAAA,cAAc,CAAGnB,SAAS,CAACoB,WAA/B,CACA,mBAAQ,oBACHD,cAAc,CAACE,MAAf,cACK,aAAM,SAAS,CAAC,oBAAhB,CAAqC,uBAAuB,CAAE,CAAEC,MAAM,CAAEH,cAAc,CAACI,KAAzB,CAA9D,EADL,cAEK,sBAAOJ,cAAc,CAACI,KAAtB,EAHF,EAAR,CAMH,CACJ,CAVD,CAYA,mBAAO,qBACFL,iBAAiB,EADf,EAAP,CAGH,CAlDD,CAoDA,cAAetB,CAAAA,MAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport store from '../redux/store';\n\n// NOTE: not sure how to use this instead of 'reference/setReference'\nimport { setReference, setPage } from '../redux/features/referenceSlice';\n\nconst Record = (props) => {\n    const [isLoaded, setIsLoaded]   = useState(false);\n    const [reference, setReference] = useState(null);\n    const [page, setPage]           = useState(null);\n    const [tuple, setTuple]         = useState(null);\n\n    const dispatch = useDispatch();\n    // gets the named reducer from the store, see redux/store\n    const referenceStore = useSelector(state => state.reference);\n\n    // component mounted, fetch the initial reference and read the data\n    useEffect(() => {\n        console.log(\"Record mounted\");\n    }, []);\n\n    // reference updated from store\n    useEffect(() => {\n        if (referenceStore && (referenceStore.reference != reference)) {\n            setIsLoaded(false);\n            setPageSize(referenceStore.pageSize);\n\n            let refToRead = referenceStore.reference;\n            setReference(refToRead);\n\n            refToRead.read(1).then(function (newPage) {\n\n                setPage(newPage);\n                store.dispatch({ type: \"reference/setPage\", refPage: newPage });\n\n                setTuple(newPage.tuples[0]);\n                setIsLoaded(true);\n            });\n        }\n    }, [referenceStore, dispatch]);\n\n    const renderDisplayName = () => {\n        if (isLoaded) {\n            var displaynameObj = reference.displayname;\n            return (<h2>\n                {displaynameObj.isHTML\n                    ? <span className=\"markdown-container\" dangerouslySetInnerHTML={{ __html: displaynameObj.value }}></span>\n                    : <span>{displaynameObj.value}</span>\n                }\n              </h2>)\n        }\n    }\n\n    return(<div>\n        {renderDisplayName()}\n    </div>);\n}\n\nexport default Record;\n"]},"metadata":{},"sourceType":"module"}