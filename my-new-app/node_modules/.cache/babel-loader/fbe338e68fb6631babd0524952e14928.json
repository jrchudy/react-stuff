{"ast":null,"code":"import _slicedToArray from\"/Users/jchudy/workspace/react-stuff/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{useDispatch,useSelector}from'react-redux';import store from'../redux/store';// import { newPageSize } from '../redux/features/referenceSlice';\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Facet=function Facet(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),checked=_useState2[0],setChecked=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),reference=_useState4[0],setReference=_useState4[1];var dispatch=useDispatch();// gets the named reducer from the store, see redux/store\nvar referenceStore=useSelector(function(state){return state.reference;});// component mounted\nuseEffect(function(){// do nothing currently since has to wait for reference to resolve\nconsole.log(\"Facet checkbox mounted\");},[]);// when reference store variable is set or changes\nuseEffect(function(){if(referenceStore&&referenceStore.reference!=reference){setReference(referenceStore.reference);}},[referenceStore,dispatch]);var renderCheckbox=function renderCheckbox(){if(reference){return/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:checked,onChange:handleCheckboxChange}),\"Toggle Facet Blob\"]});}};var config={skipRetryBrowserError:true,skipHTTP401Handling:true};var handleCheckboxChange=function handleCheckboxChange(){if(checked){// get base reference\nsetChecked(false);var newRefUri=reference.unfilteredReference.uri;ERMrest.resolve(newRefUri,config).then(function(mainRef){var ref=mainRef.contextualize.compact;setReference(ref);store.dispatch({type:\"reference/setReference\",resolvedReference:ref});});}else{setChecked(true);// apply facet blob\nvar facetBlob=\"*::facets::N4IghgdgJiBcDaoDOB7ArgJwMYFM6JAEsIAjdafIpMEAGhCjABcwkcmB9FDAc0kKQBbDoxZtOhKBwBmAaxwBPEAF0AvrVDomZNBQRUa9Ua3Zde-IWb4QBwuYpXqiMZfSwALFIVxJKAOQBhACEASQAVAEEADQB5P1gATgA2AAYkxzUgA@sort(accession::desc::)\";var _newRefUri=reference.unfilteredReference.uri+\"/\"+facetBlob;ERMrest.resolve(_newRefUri,config).then(function(mainRef){var ref=mainRef.contextualize.compact;setReference(ref);store.dispatch({type:\"reference/setReference\",resolvedReference:ref});});}};// TODO: replace select\n// <span className=\"caret\"></span>\nreturn/*#__PURE__*/_jsx(\"div\",{style:{margin:\"10px 0\"},children:renderCheckbox()});};export default Facet;","map":{"version":3,"sources":["/Users/jchudy/workspace/react-stuff/my-app/src/components/Facet.js"],"names":["React","useEffect","useState","useDispatch","useSelector","store","Facet","props","checked","setChecked","reference","setReference","dispatch","referenceStore","state","console","log","renderCheckbox","handleCheckboxChange","config","skipRetryBrowserError","skipHTTP401Handling","newRefUri","unfilteredReference","uri","ERMrest","resolve","then","mainRef","ref","contextualize","compact","type","resolvedReference","facetBlob","margin"],"mappings":"iKAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,MAAOC,CAAAA,KAAP,KAAkB,gBAAlB,CAEA;wFAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,KAAD,CAAW,CACrB,cAAkCL,QAAQ,CAAC,KAAD,CAA1C,wCAAOM,OAAP,eAAgBC,UAAhB,eACA,eAAkCP,QAAQ,CAAC,IAAD,CAA1C,yCAAOQ,SAAP,eAAkBC,YAAlB,eAEA,GAAMC,CAAAA,QAAQ,CAAGT,WAAW,EAA5B,CACA;AACA,GAAMU,CAAAA,cAAc,CAAGT,WAAW,CAAC,SAAAU,KAAK,QAAIA,CAAAA,KAAK,CAACJ,SAAV,EAAN,CAAlC,CAGA;AACAT,SAAS,CAAC,UAAM,CACZ;AACAc,OAAO,CAACC,GAAR,CAAY,wBAAZ,EACH,CAHQ,CAGN,EAHM,CAAT,CAKA;AACAf,SAAS,CAAC,UAAM,CACZ,GAAIY,cAAc,EAAIA,cAAc,CAACH,SAAf,EAA4BA,SAAlD,CAA6D,CACzDC,YAAY,CAACE,cAAc,CAACH,SAAhB,CAAZ,CACH,CACJ,CAJQ,CAIN,CAACG,cAAD,CAAiBD,QAAjB,CAJM,CAAT,CAMA,GAAMK,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CACzB,GAAIP,SAAJ,CAAe,CACX,mBAAQ,sCACJ,cAAO,IAAI,CAAC,UAAZ,CAAuB,OAAO,CAAEF,OAAhC,CAAyC,QAAQ,CAAEU,oBAAnD,EADI,uBAAR,CAIH,CACJ,CAPD,CASA,GAAIC,CAAAA,MAAM,CAAG,CAACC,qBAAqB,CAAE,IAAxB,CAA8BC,mBAAmB,CAAE,IAAnD,CAAb,CACA,GAAMH,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAAM,CAC/B,GAAIV,OAAJ,CAAa,CACT;AACAC,UAAU,CAAC,KAAD,CAAV,CACA,GAAIa,CAAAA,SAAS,CAAGZ,SAAS,CAACa,mBAAV,CAA8BC,GAA9C,CACAC,OAAO,CAACC,OAAR,CAAgBJ,SAAhB,CAA2BH,MAA3B,EAAmCQ,IAAnC,CAAwC,SAAUC,OAAV,CAAmB,CACvD,GAAIC,CAAAA,GAAG,CAAGD,OAAO,CAACE,aAAR,CAAsBC,OAAhC,CACApB,YAAY,CAACkB,GAAD,CAAZ,CACAxB,KAAK,CAACO,QAAN,CAAe,CAAEoB,IAAI,CAAE,wBAAR,CAAkCC,iBAAiB,CAAEJ,GAArD,CAAf,EACH,CAJD,EAKH,CATD,IASO,CACHpB,UAAU,CAAC,IAAD,CAAV,CACA;AACA,GAAIyB,CAAAA,SAAS,CAAG,oNAAhB,CACA,GAAIZ,CAAAA,UAAS,CAAGZ,SAAS,CAACa,mBAAV,CAA8BC,GAA9B,CAAoC,GAApC,CAA0CU,SAA1D,CACAT,OAAO,CAACC,OAAR,CAAgBJ,UAAhB,CAA2BH,MAA3B,EAAmCQ,IAAnC,CAAwC,SAAUC,OAAV,CAAmB,CACvD,GAAIC,CAAAA,GAAG,CAAGD,OAAO,CAACE,aAAR,CAAsBC,OAAhC,CACApB,YAAY,CAACkB,GAAD,CAAZ,CACAxB,KAAK,CAACO,QAAN,CAAe,CAAEoB,IAAI,CAAE,wBAAR,CAAkCC,iBAAiB,CAAEJ,GAArD,CAAf,EACH,CAJD,EAKH,CACJ,CArBD,CAuBA;AACA;AACA,mBAAO,YAAK,KAAK,CAAE,CAACM,MAAM,CAAE,QAAT,CAAZ,UACFlB,cAAc,EADZ,EAAP,CAGH,CA5DD,CA8DA,cAAeX,CAAAA,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport store from '../redux/store';\n\n// import { newPageSize } from '../redux/features/referenceSlice';\n\nconst Facet = (props) => {\n    const [checked, setChecked]     = useState(false);\n    const [reference, setReference] = useState(null);\n\n    const dispatch = useDispatch();\n    // gets the named reducer from the store, see redux/store\n    const referenceStore = useSelector(state => state.reference);\n\n\n    // component mounted\n    useEffect(() => {\n        // do nothing currently since has to wait for reference to resolve\n        console.log(\"Facet checkbox mounted\");\n    }, []);\n\n    // when reference store variable is set or changes\n    useEffect(() => {\n        if (referenceStore && referenceStore.reference != reference) {\n            setReference(referenceStore.reference);\n        }\n    }, [referenceStore, dispatch]);\n\n    const renderCheckbox = () => {\n        if (reference) {\n            return (<label>\n                <input type=\"checkbox\" checked={checked} onChange={handleCheckboxChange} />\n                Toggle Facet Blob\n            </label>)\n        }\n    }\n\n    let config = {skipRetryBrowserError: true, skipHTTP401Handling: true};\n    const handleCheckboxChange = () => {\n        if (checked) {\n            // get base reference\n            setChecked(false);\n            let newRefUri = reference.unfilteredReference.uri;\n            ERMrest.resolve(newRefUri, config).then(function (mainRef) {\n                let ref = mainRef.contextualize.compact;\n                setReference(ref);\n                store.dispatch({ type: \"reference/setReference\", resolvedReference: ref });\n            });\n        } else {\n            setChecked(true);\n            // apply facet blob\n            let facetBlob = \"*::facets::N4IghgdgJiBcDaoDOB7ArgJwMYFM6JAEsIAjdafIpMEAGhCjABcwkcmB9FDAc0kKQBbDoxZtOhKBwBmAaxwBPEAF0AvrVDomZNBQRUa9Ua3Zde-IWb4QBwuYpXqiMZfSwALFIVxJKAOQBhACEASQAVAEEADQB5P1gATgA2AAYkxzUgA@sort(accession::desc::)\";\n            let newRefUri = reference.unfilteredReference.uri + \"/\" + facetBlob;\n            ERMrest.resolve(newRefUri, config).then(function (mainRef) {\n                let ref = mainRef.contextualize.compact;\n                setReference(ref);\n                store.dispatch({ type: \"reference/setReference\", resolvedReference: ref });\n            });\n        }\n    }\n\n    // TODO: replace select\n    // <span className=\"caret\"></span>\n    return(<div style={{margin: \"10px 0\"}}>\n        {renderCheckbox()}\n    </div>);\n}\n\nexport default Facet;\n"]},"metadata":{},"sourceType":"module"}