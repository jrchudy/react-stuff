{"ast":null,"code":"import _slicedToArray from\"/Users/jchudy/workspace/react-stuff/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{useDispatch,useSelector}from'react-redux';import store from'../redux/store';import{jsx as _jsx}from\"react/jsx-runtime\";var Recordedit=function Recordedit(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoaded=_useState2[0],setIsLoaded=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),reference=_useState4[0],setReference=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),page=_useState6[0],setPage=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),tuple=_useState8[0],setTuple=_useState8[1];var dispatch=useDispatch();// gets the named reducer from the store, see redux/store\nvar referenceStore=useSelector(function(state){return state.reference;});// component mounted, fetch the initial reference and read the data\nuseEffect(function(){console.log(\"Recordedit mounted\");},[]);// reference updated from store\n// useEffect(() => {\n//\n// }, [referenceStore, dispatch]);\nvar renderDisplayName=function renderDisplayName(){var displaynameObj=reference.displayname;return/*#__PURE__*/_jsx(\"h2\",{children:displaynameObj.isHTML?/*#__PURE__*/_jsx(\"span\",{className:\"markdown-container\",dangerouslySetInnerHTML:{__html:displaynameObj.value}}):/*#__PURE__*/_jsx(\"span\",{children:displaynameObj.value})});};return/*#__PURE__*/_jsx(\"div\",{children:renderDisplayName()});};export default Recordedit;","map":{"version":3,"sources":["/Users/jchudy/workspace/react-stuff/my-app/src/components/Recordedit.js"],"names":["React","useEffect","useState","useDispatch","useSelector","store","Recordedit","props","isLoaded","setIsLoaded","reference","setReference","page","setPage","tuple","setTuple","dispatch","referenceStore","state","console","log","renderDisplayName","displaynameObj","displayname","isHTML","__html","value"],"mappings":"iKAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,MAAOC,CAAAA,KAAP,KAAkB,gBAAlB,C,2CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CAC1B,cAAkCL,QAAQ,CAAC,KAAD,CAA1C,wCAAOM,QAAP,eAAiBC,WAAjB,eACA,eAAkCP,QAAQ,CAAC,IAAD,CAA1C,yCAAOQ,SAAP,eAAkBC,YAAlB,eACA,eAAkCT,QAAQ,CAAC,IAAD,CAA1C,yCAAOU,IAAP,eAAaC,OAAb,eACA,eAAkCX,QAAQ,CAAC,IAAD,CAA1C,yCAAOY,KAAP,eAAcC,QAAd,eAEA,GAAMC,CAAAA,QAAQ,CAAGb,WAAW,EAA5B,CACA;AACA,GAAMc,CAAAA,cAAc,CAAGb,WAAW,CAAC,SAAAc,KAAK,QAAIA,CAAAA,KAAK,CAACR,SAAV,EAAN,CAAlC,CAEA;AACAT,SAAS,CAAC,UAAM,CACZkB,OAAO,CAACC,GAAR,CAAY,oBAAZ,EACH,CAFQ,CAEN,EAFM,CAAT,CAIA;AACA;AACA;AACA;AAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC5B,GAAIC,CAAAA,cAAc,CAAGZ,SAAS,CAACa,WAA/B,CACA,mBAAQ,oBACHD,cAAc,CAACE,MAAf,cACK,aAAM,SAAS,CAAC,oBAAhB,CAAqC,uBAAuB,CAAE,CAAEC,MAAM,CAAEH,cAAc,CAACI,KAAzB,CAA9D,EADL,cAEK,sBAAOJ,cAAc,CAACI,KAAtB,EAHF,EAAR,CAMH,CARD,CAUA,mBAAO,qBACFL,iBAAiB,EADf,EAAP,CAGH,CAjCD,CAmCA,cAAef,CAAAA,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport store from '../redux/store';\n\nconst Recordedit = (props) => {\n    const [isLoaded, setIsLoaded]   = useState(false);\n    const [reference, setReference] = useState(null);\n    const [page, setPage]           = useState(null);\n    const [tuple, setTuple]         = useState(null);\n\n    const dispatch = useDispatch();\n    // gets the named reducer from the store, see redux/store\n    const referenceStore = useSelector(state => state.reference);\n\n    // component mounted, fetch the initial reference and read the data\n    useEffect(() => {\n        console.log(\"Recordedit mounted\");\n    }, []);\n\n    // reference updated from store\n    // useEffect(() => {\n    //\n    // }, [referenceStore, dispatch]);\n\n    const renderDisplayName = () => {\n        var displaynameObj = reference.displayname;\n        return (<h2>\n            {displaynameObj.isHTML\n                ? <span className=\"markdown-container\" dangerouslySetInnerHTML={{ __html: displaynameObj.value }}></span>\n                : <span>{displaynameObj.value}</span>\n            }\n        </h2>)\n    }\n\n    return(<div>\n        {renderDisplayName()}\n    </div>);\n}\n\nexport default Recordedit;\n"]},"metadata":{},"sourceType":"module"}