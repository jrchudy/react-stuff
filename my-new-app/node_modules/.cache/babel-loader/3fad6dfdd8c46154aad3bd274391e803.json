{"ast":null,"code":"import _slicedToArray from\"/Users/jchudy/workspace/react-stuff/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{useDispatch,useSelector}from'react-redux';import store from'../redux/store';import Facet from'./Facet';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TableHeader=function TableHeader(props){var _useState=useState(25),_useState2=_slicedToArray(_useState,2),selectedPageLimit=_useState2[0],setSelectedPageLimit=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isLoaded=_useState4[0],setIsLoaded=_useState4[1];var _useState5=useState('XXX'),_useState6=_slicedToArray(_useState5,2),aggCount=_useState6[0],setAggCount=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),reference=_useState8[0],setReference=_useState8[1];// never going to change\nvar pageLimits=[10,25,50,75,100,200];var dispatch=useDispatch();// gets the named reducer from the store, see redux/store\nvar referenceStore=useSelector(function(state){return state.reference;});// component mounted\nuseEffect(function(){// do nothing currently since has to wait for reference to resolve\nconsole.log(\"Table header mounted\");},[]);// when reference store variable is set or changes, make request to fetch agg count\nuseEffect(function(){if(referenceStore&&referenceStore.reference!=reference){setReference(referenceStore.reference);referenceStore.reference.getAggregates([referenceStore.reference.aggregate.countAgg]).then(function(data){setAggCount(data[0]);}).catch(function(err){console.log(err);});}},[referenceStore,dispatch]);var renderPageLimits=function renderPageLimits(){// <span className={\"glyphicon pull-right \" + this.state.selectedPageLimit === limit ? 'glyphicon-ok' : 'glyphicon-invisible'}></span>\nreturn pageLimits.map(function(limit,index){return/*#__PURE__*/_jsx(\"option\",{className:\"page-size-limit-${limit}\",children:limit},index);});};var handlePageLimitChange=function handlePageLimitChange(value){// dispatch to store that reference should be reread\nstore.dispatch({type:\"reference/newPageSize\",pageSize:value});setSelectedPageLimit(value);};var handleCreateClick=function handleCreateClick(){var refPath=\"isa:dataset\";store.dispatch({type:\"reference/setAppState\",appState:\"Recordedit\",referencePath:refPath});};// TODO: replace select\n// <span className=\"caret\"></span>\nreturn/*#__PURE__*/_jsxs(\"div\",{style:{margin:\"10px 0\"},children:[/*#__PURE__*/_jsx(Facet,{}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Displaying first \",/*#__PURE__*/_jsx(\"select\",{className:\"page-size-dropdown chaise-btn chaise-btn-secondary\",value:selectedPageLimit,onChange:function onChange(event){return handlePageLimitChange(event.target.value);},children:renderPageLimits()}),\" of \",aggCount,\" records\"]}),/*#__PURE__*/_jsx(\"button\",{className:\"pull-right chaise-btn chaise-btn-primary\",onClick:handleCreateClick,children:\"Create\"})]});};export default TableHeader;","map":{"version":3,"sources":["/Users/jchudy/workspace/react-stuff/my-app/src/components/TableHeader.js"],"names":["React","useEffect","useState","useDispatch","useSelector","store","Facet","TableHeader","props","selectedPageLimit","setSelectedPageLimit","isLoaded","setIsLoaded","aggCount","setAggCount","reference","setReference","pageLimits","dispatch","referenceStore","state","console","log","getAggregates","aggregate","countAgg","then","data","catch","err","renderPageLimits","map","limit","index","handlePageLimitChange","value","type","pageSize","handleCreateClick","refPath","appState","referencePath","margin","event","target"],"mappings":"iKAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,MAAOC,CAAAA,KAAP,KAAkB,gBAAlB,CAEA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,C,wFAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC3B,cAAkDN,QAAQ,CAAC,EAAD,CAA1D,wCAAOO,iBAAP,eAA0BC,oBAA1B,eACA,eAAkDR,QAAQ,CAAC,KAAD,CAA1D,yCAAOS,QAAP,eAAiBC,WAAjB,eACA,eAAkDV,QAAQ,CAAC,KAAD,CAA1D,yCAAOW,QAAP,eAAiBC,WAAjB,eACA,eAAkDZ,QAAQ,CAAC,IAAD,CAA1D,yCAAOa,SAAP,eAAkBC,YAAlB,eAEA;AACA,GAAMC,CAAAA,UAAU,CAAG,CAAC,EAAD,CAAK,EAAL,CAAS,EAAT,CAAa,EAAb,CAAiB,GAAjB,CAAsB,GAAtB,CAAnB,CAEA,GAAMC,CAAAA,QAAQ,CAAGf,WAAW,EAA5B,CACA;AACA,GAAMgB,CAAAA,cAAc,CAAGf,WAAW,CAAC,SAAAgB,KAAK,QAAIA,CAAAA,KAAK,CAACL,SAAV,EAAN,CAAlC,CAGA;AACAd,SAAS,CAAC,UAAM,CACZ;AACAoB,OAAO,CAACC,GAAR,CAAY,sBAAZ,EACH,CAHQ,CAGN,EAHM,CAAT,CAKA;AACArB,SAAS,CAAC,UAAM,CACZ,GAAIkB,cAAc,EAAIA,cAAc,CAACJ,SAAf,EAA4BA,SAAlD,CAA6D,CACzDC,YAAY,CAACG,cAAc,CAACJ,SAAhB,CAAZ,CACAI,cAAc,CAACJ,SAAf,CAAyBQ,aAAzB,CAAuC,CAACJ,cAAc,CAACJ,SAAf,CAAyBS,SAAzB,CAAmCC,QAApC,CAAvC,EAAsFC,IAAtF,CAA2F,SAAUC,IAAV,CAAgB,CACvGb,WAAW,CAACa,IAAI,CAAC,CAAD,CAAL,CAAX,CACH,CAFD,EAEGC,KAFH,CAES,SAAUC,GAAV,CAAe,CACpBR,OAAO,CAACC,GAAR,CAAYO,GAAZ,EACH,CAJD,EAKH,CACJ,CATQ,CASN,CAACV,cAAD,CAAiBD,QAAjB,CATM,CAAT,CAWA,GAAMY,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CAC3B;AACA,MAAOb,CAAAA,UAAU,CAACc,GAAX,CAAe,SAACC,KAAD,CAAQC,KAAR,CAAkB,CACpC,mBAAQ,eAAoB,SAAS,CAAE,0BAA/B,UAA4DD,KAA5D,EAAaC,KAAb,CAAR,CACH,CAFM,CAAP,CAGH,CALD,CAOA,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,KAAD,CAAW,CACrC;AACA9B,KAAK,CAACa,QAAN,CAAe,CAAEkB,IAAI,CAAE,uBAAR,CAAiCC,QAAQ,CAAEF,KAA3C,CAAf,EACAzB,oBAAoB,CAACyB,KAAD,CAApB,CACH,CAJD,CAMA,GAAMG,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC5B,GAAIC,CAAAA,OAAO,CAAG,aAAd,CAEAlC,KAAK,CAACa,QAAN,CAAe,CAAEkB,IAAI,CAAE,uBAAR,CAAiCI,QAAQ,CAAE,YAA3C,CAAyDC,aAAa,CAAEF,OAAxE,CAAf,EACH,CAJD,CAMA;AACA;AACA,mBAAO,aAAK,KAAK,CAAE,CAACG,MAAM,CAAE,QAAT,CAAZ,wBACH,KAAC,KAAD,IADG,cAEH,yDAAuB,eAAQ,SAAS,CAAC,oDAAlB,CAAuE,KAAK,CAAEjC,iBAA9E,CAAiG,QAAQ,CAAE,kBAAAkC,KAAK,QAAIT,CAAAA,qBAAqB,CAACS,KAAK,CAACC,MAAN,CAAaT,KAAd,CAAzB,EAAhH,UACtBL,gBAAgB,EADM,EAAvB,QAEcjB,QAFd,cAFG,cAKH,eAAQ,SAAS,CAAC,0CAAlB,CAA6D,OAAO,CAAEyB,iBAAtE,oBALG,GAAP,CAOH,CA5DD,CA8DA,cAAe/B,CAAAA,WAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport store from '../redux/store';\n\nimport Facet from './Facet';\n\nconst TableHeader = (props) => {\n    const [selectedPageLimit, setSelectedPageLimit] = useState(25);\n    const [isLoaded, setIsLoaded]                   = useState(false);\n    const [aggCount, setAggCount]                   = useState('XXX');\n    const [reference, setReference]                 = useState(null);\n\n    // never going to change\n    const pageLimits = [10, 25, 50, 75, 100, 200];\n\n    const dispatch = useDispatch();\n    // gets the named reducer from the store, see redux/store\n    const referenceStore = useSelector(state => state.reference);\n\n\n    // component mounted\n    useEffect(() => {\n        // do nothing currently since has to wait for reference to resolve\n        console.log(\"Table header mounted\");\n    }, []);\n\n    // when reference store variable is set or changes, make request to fetch agg count\n    useEffect(() => {\n        if (referenceStore && referenceStore.reference != reference) {\n            setReference(referenceStore.reference);\n            referenceStore.reference.getAggregates([referenceStore.reference.aggregate.countAgg]).then(function (data) {\n                setAggCount(data[0]);\n            }).catch(function (err) {\n                console.log(err)\n            });\n        }\n    }, [referenceStore, dispatch]);\n\n    const renderPageLimits = () => {\n        // <span className={\"glyphicon pull-right \" + this.state.selectedPageLimit === limit ? 'glyphicon-ok' : 'glyphicon-invisible'}></span>\n        return pageLimits.map((limit, index) => {\n            return (<option key={index} className={\"page-size-limit-${limit}\"}>{limit}</option>)\n        })\n    }\n\n    const handlePageLimitChange = (value) => {\n        // dispatch to store that reference should be reread\n        store.dispatch({ type: \"reference/newPageSize\", pageSize: value });\n        setSelectedPageLimit(value);\n    }\n\n    const handleCreateClick = () => {\n        let refPath = \"isa:dataset\";\n\n        store.dispatch({ type: \"reference/setAppState\", appState: \"Recordedit\", referencePath: refPath });\n    }\n\n    // TODO: replace select\n    // <span className=\"caret\"></span>\n    return(<div style={{margin: \"10px 0\"}}>\n        <Facet />\n        <span>Displaying first <select className=\"page-size-dropdown chaise-btn chaise-btn-secondary\" value={selectedPageLimit} onChange={event => handlePageLimitChange(event.target.value)}>\n        {renderPageLimits()}\n        </select> of {aggCount} records</span>\n        <button className=\"pull-right chaise-btn chaise-btn-primary\" onClick={handleCreateClick}>Create</button>\n    </div>);\n}\n\nexport default TableHeader;\n"]},"metadata":{},"sourceType":"module"}