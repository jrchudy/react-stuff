{"ast":null,"code":"import _slicedToArray from\"/Users/jchudy/workspace/react-stuff/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import Axios from'axios';import{useDispatch,useSelector}from'react-redux';import store from'../redux/store';// NOTE: not sure how to use this instead of 'reference/setReference'\nimport{setReference,setPage}from'../redux/features/referenceSlice';import TableHeader from'./TableHeader';import RecordsetTable from'./RecordsetTable';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Recordset=function Recordset(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoaded=_useState2[0],setIsLoaded=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),reference=_useState4[0],setReference=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),page=_useState6[0],setPage=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),tuples=_useState8[0],setTuples=_useState8[1];var _useState9=useState(25),_useState10=_slicedToArray(_useState9,2),pageSize=_useState10[0],setPageSize=_useState10[1];var dispatch=useDispatch();// gets the named reducer from the store, see redux/store\nvar referenceStore=useSelector(function(state){return state.reference;});// component mounted, fetch the initial reference and read the data\nuseEffect(function(){console.log(\"Recordset mounted\");},[]);// reference updated from store\nuseEffect(function(){if(referenceStore&&(referenceStore.pageSize!=pageSize||referenceStore.reference!=reference)){setIsLoaded(false);setPageSize(referenceStore.pageSize);var refToRead=reference;if(referenceStore.reference!=reference){setReference(referenceStore.reference);refToRead=referenceStore.reference;}refToRead.read(referenceStore.pageSize).then(function(newPage){setPage(newPage);store.dispatch({type:\"reference/setPage\",refPage:newPage});setTuples(newPage.tuples);setIsLoaded(true);});}},[referenceStore,dispatch]);var renderDisplayName=function renderDisplayName(){if(isLoaded){var displaynameObj=reference.displayname;return/*#__PURE__*/_jsx(\"h2\",{children:displaynameObj.isHTML?/*#__PURE__*/_jsx(\"span\",{className:\"markdown-container\",dangerouslySetInnerHTML:{__html:displaynameObj.value}}):/*#__PURE__*/_jsx(\"span\",{children:displaynameObj.value})});}};return/*#__PURE__*/_jsxs(\"div\",{children:[renderDisplayName(),/*#__PURE__*/_jsx(TableHeader,{}),/*#__PURE__*/_jsx(RecordsetTable,{className:\"recordset-table-container\"})]});};export default Recordset;","map":{"version":3,"sources":["/Users/jchudy/workspace/react-stuff/my-app/src/components/Recordset.js"],"names":["React","useEffect","useState","Axios","useDispatch","useSelector","store","setReference","setPage","TableHeader","RecordsetTable","Recordset","props","isLoaded","setIsLoaded","reference","page","tuples","setTuples","pageSize","setPageSize","dispatch","referenceStore","state","console","log","refToRead","read","then","newPage","type","refPage","renderDisplayName","displaynameObj","displayname","isHTML","__html","value"],"mappings":"iKAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,MAAOC,CAAAA,KAAP,KAAkB,gBAAlB,CAEA;AACA,OAASC,YAAT,CAAuBC,OAAvB,KAAsC,kCAAtC,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,C,wFAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,KAAD,CAAW,CACzB,cAAkCV,QAAQ,CAAC,KAAD,CAA1C,wCAAOW,QAAP,eAAiBC,WAAjB,eACA,eAAkCZ,QAAQ,CAAC,IAAD,CAA1C,yCAAOa,SAAP,eAAkBR,YAAlB,eACA,eAAkCL,QAAQ,CAAC,IAAD,CAA1C,yCAAOc,IAAP,eAAaR,OAAb,eACA,eAAkCN,QAAQ,CAAC,IAAD,CAA1C,yCAAOe,MAAP,eAAeC,SAAf,eACA,eAAkChB,QAAQ,CAAC,EAAD,CAA1C,0CAAOiB,QAAP,gBAAiBC,WAAjB,gBAEA,GAAMC,CAAAA,QAAQ,CAAGjB,WAAW,EAA5B,CACA;AACA,GAAMkB,CAAAA,cAAc,CAAGjB,WAAW,CAAC,SAAAkB,KAAK,QAAIA,CAAAA,KAAK,CAACR,SAAV,EAAN,CAAlC,CAEA;AACAd,SAAS,CAAC,UAAM,CACZuB,OAAO,CAACC,GAAR,CAAY,mBAAZ,EACH,CAFQ,CAEN,EAFM,CAAT,CAIA;AACAxB,SAAS,CAAC,UAAM,CACZ,GAAIqB,cAAc,GAAKA,cAAc,CAACH,QAAf,EAA2BA,QAA3B,EAAuCG,cAAc,CAACP,SAAf,EAA4BA,SAAxE,CAAlB,CAAsG,CAClGD,WAAW,CAAC,KAAD,CAAX,CACAM,WAAW,CAACE,cAAc,CAACH,QAAhB,CAAX,CAEA,GAAIO,CAAAA,SAAS,CAAGX,SAAhB,CACA,GAAIO,cAAc,CAACP,SAAf,EAA4BA,SAAhC,CAA2C,CACvCR,YAAY,CAACe,cAAc,CAACP,SAAhB,CAAZ,CACAW,SAAS,CAAGJ,cAAc,CAACP,SAA3B,CACH,CAEDW,SAAS,CAACC,IAAV,CAAeL,cAAc,CAACH,QAA9B,EAAwCS,IAAxC,CAA6C,SAAUC,OAAV,CAAmB,CAE5DrB,OAAO,CAACqB,OAAD,CAAP,CACAvB,KAAK,CAACe,QAAN,CAAe,CAAES,IAAI,CAAE,mBAAR,CAA6BC,OAAO,CAAEF,OAAtC,CAAf,EAEAX,SAAS,CAACW,OAAO,CAACZ,MAAT,CAAT,CACAH,WAAW,CAAC,IAAD,CAAX,CACH,CAPD,EAQH,CACJ,CApBQ,CAoBN,CAACQ,cAAD,CAAiBD,QAAjB,CApBM,CAAT,CAsBA,GAAMW,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC5B,GAAInB,QAAJ,CAAc,CACV,GAAIoB,CAAAA,cAAc,CAAGlB,SAAS,CAACmB,WAA/B,CACA,mBAAQ,oBACHD,cAAc,CAACE,MAAf,cACK,aAAM,SAAS,CAAC,oBAAhB,CAAqC,uBAAuB,CAAE,CAAEC,MAAM,CAAEH,cAAc,CAACI,KAAzB,CAA9D,EADL,cAEK,sBAAOJ,cAAc,CAACI,KAAtB,EAHF,EAAR,CAMH,CACJ,CAVD,CAYA,mBAAO,uBACFL,iBAAiB,EADf,cAEH,KAAC,WAAD,IAFG,cAGH,KAAC,cAAD,EAAgB,SAAS,CAAC,2BAA1B,EAHG,GAAP,CAKH,CAxDD,CA0DA,cAAerB,CAAAA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport store from '../redux/store';\n\n// NOTE: not sure how to use this instead of 'reference/setReference'\nimport { setReference, setPage } from '../redux/features/referenceSlice';\nimport TableHeader from './TableHeader';\nimport RecordsetTable from './RecordsetTable';\n\nconst Recordset = (props) => {\n    const [isLoaded, setIsLoaded]   = useState(false);\n    const [reference, setReference] = useState(null);\n    const [page, setPage]           = useState(null);\n    const [tuples, setTuples]       = useState(null);\n    const [pageSize, setPageSize]   = useState(25);\n\n    const dispatch = useDispatch();\n    // gets the named reducer from the store, see redux/store\n    const referenceStore = useSelector(state => state.reference);\n\n    // component mounted, fetch the initial reference and read the data\n    useEffect(() => {\n        console.log(\"Recordset mounted\");\n    }, []);\n\n    // reference updated from store\n    useEffect(() => {\n        if (referenceStore && (referenceStore.pageSize != pageSize || referenceStore.reference != reference)) {\n            setIsLoaded(false);\n            setPageSize(referenceStore.pageSize);\n\n            let refToRead = reference;\n            if (referenceStore.reference != reference) {\n                setReference(referenceStore.reference);\n                refToRead = referenceStore.reference;\n            }\n\n            refToRead.read(referenceStore.pageSize).then(function (newPage) {\n\n                setPage(newPage);\n                store.dispatch({ type: \"reference/setPage\", refPage: newPage });\n\n                setTuples(newPage.tuples);\n                setIsLoaded(true);\n            });\n        }\n    }, [referenceStore, dispatch]);\n\n    const renderDisplayName = () => {\n        if (isLoaded) {\n            var displaynameObj = reference.displayname;\n            return (<h2>\n                {displaynameObj.isHTML\n                    ? <span className=\"markdown-container\" dangerouslySetInnerHTML={{ __html: displaynameObj.value }}></span>\n                    : <span>{displaynameObj.value}</span>\n                }\n              </h2>)\n        }\n    }\n\n    return(<div>\n        {renderDisplayName()}\n        <TableHeader />\n        <RecordsetTable className=\"recordset-table-container\" />\n    </div>);\n}\n\nexport default Recordset;\n"]},"metadata":{},"sourceType":"module"}