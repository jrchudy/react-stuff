{"ast":null,"code":"import _slicedToArray from\"/Users/jchudy/workspace/react-stuff/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _this=this;import React,{useEffect,useState}from'react';import Axios from'axios';import{useDispatch,useSelector}from'react-redux';import store from'../redux/store';// NOTE: not sure how to use this instead of 'reference/setReference'\nimport{setReference}from'../redux/features/referenceSlice';// var TableHeader = require('./TableHeader');\n// var RecordsetTable = require('./RecordsetTable');\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var Recordset=function Recordset(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoaded=_useState2[0],setIsLoaded=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),reference=_useState4[0],setReference=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),page=_useState6[0],setPage=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),tuples=_useState8[0],setTuples=_useState8[1];// NOTE: example using thunks, haven't explored this since useEffect hook below does the job\n// export const fetchPosts = createAsyncThunk('set/fetchReference', async () => {\n//     const response = await client.get('/fakeApi/posts')\n//     return response.posts\n// });\n//\n// const exampleThunkFunction = (dispatch, getState) => {\n//     const stateBefore = getState()\n//     console.log(`Counter before: ${stateBefore.counter}`)\n//     dispatch(increment())\n//     const stateAfter = getState()\n//     console.log(`Counter after: ${stateAfter.counter}`)\n// }\n//\n// store.dispatch(exampleThunkFunction)\n// component mounted, fetch the initial reference and read the data\nuseEffect(function(){if(!props.fetched){var self=_this;var config={skipRetryBrowserError:true,skipHTTP401Handling:true};ERMrest.configure(Axios,Q);ERMrest.onload().then(function(){ERMrest.appLinkFn(function appTagToURL(tag,location,context){var appPath;if(tag&&tag in appTagMapping){appPath=appTagMapping[tag];}else{var getValueFromContext=function getValueFromContext(object,context){var partial=context,parts=context.split(\"/\");while(partial!==\"\"){if(partial in object){// found the context\nreturn object[partial];}parts.splice(-1,1);// remove the last part\npartial=parts.join(\"/\");}return object[\"*\"];};var appContextMapping={detailed:\"/record\",compact:\"/recordset\",edit:\"/recordedit\",entry:\"/recordedit\"};appContextMapping['*']=\"/record\";appPath=getValueFromContext(appContextMapping,context);}var url=\"https://dev.isrd.isi.edu/~jchudy/chaise\"+appPath+\"/#\"+location.catalog+\"/\"+location.path;var pcontext=[];// var settingsObj = ConfigUtils.getSettings()\nvar settingsObj={};// var contextHeaderParams = ConfigUtils.getContextHeaderParams();\nvar contextHeaderParams={};pcontext.push(\"pcid=\"+contextHeaderParams.cid);pcontext.push(\"ppid=\"+contextHeaderParams.pid);// only add the value to the applink function if it's true\nif(settingsObj.hideNavbar)pcontext.push(\"hideNavbar=\"+settingsObj.hideNavbar);// TODO we might want to allow only certian query parameters\nif(location.queryParamsString){url=url+\"?\"+location.queryParamsString;}if(pcontext.length>0){url=url+(location.queryParamsString?\"&\":\"?\")+pcontext.join(\"&\");}return url;});return ERMrest.resolve(\"https://dev.isrd.isi.edu/ermrest/catalog/1/entity/isa:dataset\",config);}).then(function(resolvedReference){setReference(resolvedReference.contextualize.compact);// dispatch to reducer.name + / + reducer.action (reference/setReference)\nstore.dispatch({type:\"reference/setReference\",resolvedReference:resolvedReference});return resolvedReference.read(25);}).then(function(refPage){setPage(refPage);store.dispatch({type:\"reference/setPage\",refPage:refPage});setTuples(refPage.tuples);setIsLoaded(true);// TODO: how to set this properly\nprops.fetched=true;console.log(\"Page return: \",refPage);}).catch(function(err){console.log(err);});}},[]);// reference updated from store\nuseEffect(function(){},[]);// const dispatch = useDispatch()\n// fires when the component is attached to the DOM\n// componentDidMount() {\n//   var self = this;\n//   var config = {skipRetryBrowserError: true, skipHTTP401Handling: true};\n//   ERMrest.configure(Axios, Q);\n//   ERMrest.onload().then(function () {\n//       ERMrest.appLinkFn(function appTagToURL(tag, location, context) {\n//           var appPath;\n//           if (tag && (tag in appTagMapping)) {\n//               appPath = appTagMapping[tag];\n//           } else {\n//               function getValueFromContext(object, context) {\n//                   var partial = context,\n//                   parts = context.split(\"/\");\n//                   while (partial !== \"\") {\n//                       if (partial in object) { // found the context\n//                           return object[partial];\n//                       }\n//                       parts.splice(-1,1); // remove the last part\n//                       partial = parts.join(\"/\");\n//                   }\n//                   return object[\"*\"];\n//               }\n//\n//               const appContextMapping = {\n//                   detailed: \"/record\",\n//                   compact: \"/recordset\",\n//                   edit: \"/recordedit\",\n//                   entry: \"/recordedit\"\n//               }\n//               appContextMapping['*'] = \"/record\";\n//\n//               appPath = getValueFromContext(appContextMapping, context);\n//           }\n//\n//           var url = \"https://dev.isrd.isi.edu/~jchudy/chaise\" + appPath + \"/#\" + location.catalog + \"/\" + location.path;\n//           var pcontext = [];\n//\n//           // var settingsObj = ConfigUtils.getSettings()\n//           var settingsObj = {};\n//           // var contextHeaderParams = ConfigUtils.getContextHeaderParams();\n//           var contextHeaderParams = {};\n//           pcontext.push(\"pcid=\" + contextHeaderParams.cid);\n//           pcontext.push(\"ppid=\" + contextHeaderParams.pid);\n//           // only add the value to the applink function if it's true\n//           if (settingsObj.hideNavbar) pcontext.push(\"hideNavbar=\" + settingsObj.hideNavbar)\n//\n//           // TODO we might want to allow only certian query parameters\n//           if (location.queryParamsString) {\n//               url = url + \"?\" + location.queryParamsString;\n//           }\n//           if (pcontext.length > 0) {\n//               url = url + (location.queryParamsString ? \"&\" : \"?\") + pcontext.join(\"&\");\n//           }\n//           return url;\n//       });\n//\n//       return ERMrest.resolve(\"https://dev.isrd.isi.edu/ermrest/catalog/1/entity/isa:dataset\", config);\n//   }).then(function (reference) {\n//       var ref = reference.contextualize.compact\n//       console.log(self)\n//       dispatch(setReference(ref))\n//\n//       self.setState({\n//           reference: ref\n//       });\n//\n//       return self.state.reference.read(25);\n//   }).then(function (page) {\n//\n//       self.setState({\n//           page: page,\n//           tuples: page.tuples,\n//           isLoaded: true\n//       });\n//\n//       console.log(\"Table state: \", self.state);\n//   }).catch(function (err) {\n//       console.log(err)\n//   });\n// }\n//\n// componentDidUpdate(prevProps, prevState, snapshot) {\n//     // console.log(\"Recordset did update\")\n//     // console.log(\"prev props: \", prevProps);\n//     // console.log(\"prev state: \", prevState);\n// }\n//\n// shouldComponentUpdate(nextProps, nextState) {\n//     console.log(\"recordset next props: \", nextProps)\n//     console.log(\"recordset next state: \", nextState)\n//     var referenceChanged = this.state.reference != nextState.reference\n//     var pageChanged = this.state.page != nextState.page\n//     console.log(\"reference change: \", referenceChanged);\n//     console.log(\"page change: \", pageChanged);\n//     return referenceChanged || pageChanged\n// }\n//\nvar renderDisplayName=function renderDisplayName(){if(isLoaded){var displaynameObj=reference.displayname;return/*#__PURE__*/_jsx(\"h2\",{children:displaynameObj.isHTML?/*#__PURE__*/_jsx(\"span\",{className:\"markdown-container\",dangerouslySetInnerHTML:{__html:displaynameObj.value}}):/*#__PURE__*/_jsx(\"span\",{children:displaynameObj.value})});}};// <RecordsetTable className=\"recordset-table-container\" />\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[renderDisplayName(),/*#__PURE__*/_jsx(TableHeader,{style:{margin:\"10px 0\"},reference:reference})]});};export default Recordset;","map":{"version":3,"sources":["/Users/jchudy/workspace/react-stuff/my-app/src/components/recordset.js"],"names":["React","useEffect","useState","Axios","useDispatch","useSelector","store","setReference","Recordset","props","isLoaded","setIsLoaded","reference","page","setPage","tuples","setTuples","fetched","self","config","skipRetryBrowserError","skipHTTP401Handling","ERMrest","configure","Q","onload","then","appLinkFn","appTagToURL","tag","location","context","appPath","appTagMapping","getValueFromContext","object","partial","parts","split","splice","join","appContextMapping","detailed","compact","edit","entry","url","catalog","path","pcontext","settingsObj","contextHeaderParams","push","cid","pid","hideNavbar","queryParamsString","length","resolve","resolvedReference","contextualize","dispatch","type","read","refPage","console","log","catch","err","renderDisplayName","displaynameObj","displayname","isHTML","__html","value","margin"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport store from '../redux/store';\n\n// NOTE: not sure how to use this instead of 'reference/setReference'\nimport { setReference } from '../redux/features/referenceSlice';\n// var TableHeader = require('./TableHeader');\n// var RecordsetTable = require('./RecordsetTable');\n\nexport const Recordset = (props) => {\n    const [isLoaded, setIsLoaded]   = useState(false);\n    const [reference, setReference] = useState(null);\n    const [page, setPage]           = useState(null);\n    const [tuples, setTuples]       = useState(null);\n\n    // NOTE: example using thunks, haven't explored this since useEffect hook below does the job\n    // export const fetchPosts = createAsyncThunk('set/fetchReference', async () => {\n    //     const response = await client.get('/fakeApi/posts')\n    //     return response.posts\n    // });\n    //\n    // const exampleThunkFunction = (dispatch, getState) => {\n    //     const stateBefore = getState()\n    //     console.log(`Counter before: ${stateBefore.counter}`)\n    //     dispatch(increment())\n    //     const stateAfter = getState()\n    //     console.log(`Counter after: ${stateAfter.counter}`)\n    // }\n    //\n    // store.dispatch(exampleThunkFunction)\n\n    // component mounted, fetch the initial reference and read the data\n    useEffect(() => {\n        if(!props.fetched) {\n            var self = this;\n            var config = {skipRetryBrowserError: true, skipHTTP401Handling: true};\n            ERMrest.configure(Axios, Q);\n            ERMrest.onload().then(function () {\n                ERMrest.appLinkFn(function appTagToURL(tag, location, context) {\n                    var appPath;\n                    if (tag && (tag in appTagMapping)) {\n                        appPath = appTagMapping[tag];\n                    } else {\n                        function getValueFromContext(object, context) {\n                            var partial = context,\n                            parts = context.split(\"/\");\n                            while (partial !== \"\") {\n                                if (partial in object) { // found the context\n                                    return object[partial];\n                                }\n                                parts.splice(-1,1); // remove the last part\n                                partial = parts.join(\"/\");\n                            }\n                            return object[\"*\"];\n                        }\n\n                        const appContextMapping = {\n                            detailed: \"/record\",\n                            compact: \"/recordset\",\n                            edit: \"/recordedit\",\n                            entry: \"/recordedit\"\n                        }\n                        appContextMapping['*'] = \"/record\";\n\n                        appPath = getValueFromContext(appContextMapping, context);\n                    }\n\n                    var url = \"https://dev.isrd.isi.edu/~jchudy/chaise\" + appPath + \"/#\" + location.catalog + \"/\" + location.path;\n                    var pcontext = [];\n\n                    // var settingsObj = ConfigUtils.getSettings()\n                    var settingsObj = {};\n                    // var contextHeaderParams = ConfigUtils.getContextHeaderParams();\n                    var contextHeaderParams = {};\n                    pcontext.push(\"pcid=\" + contextHeaderParams.cid);\n                    pcontext.push(\"ppid=\" + contextHeaderParams.pid);\n                    // only add the value to the applink function if it's true\n                    if (settingsObj.hideNavbar) pcontext.push(\"hideNavbar=\" + settingsObj.hideNavbar)\n\n                    // TODO we might want to allow only certian query parameters\n                    if (location.queryParamsString) {\n                        url = url + \"?\" + location.queryParamsString;\n                    }\n                    if (pcontext.length > 0) {\n                        url = url + (location.queryParamsString ? \"&\" : \"?\") + pcontext.join(\"&\");\n                    }\n                    return url;\n                });\n\n                return ERMrest.resolve(\"https://dev.isrd.isi.edu/ermrest/catalog/1/entity/isa:dataset\", config);\n            }).then(function (resolvedReference) {\n                setReference(resolvedReference.contextualize.compact);\n                // dispatch to reducer.name + / + reducer.action (reference/setReference)\n                store.dispatch({ type: \"reference/setReference\", resolvedReference });\n\n                return resolvedReference.read(25);\n            }).then(function (refPage) {\n\n                setPage(refPage);\n                store.dispatch({ type: \"reference/setPage\", refPage });\n\n                setTuples(refPage.tuples);\n                setIsLoaded(true);\n\n                // TODO: how to set this properly\n                props.fetched = true;\n\n                console.log(\"Page return: \", refPage);\n            }).catch(function (err) {\n                console.log(err)\n            });\n        }\n    }, []);\n\n    // reference updated from store\n    useEffect(() => {\n\n    }, []);\n\n\n    // const dispatch = useDispatch()\n    // fires when the component is attached to the DOM\n    // componentDidMount() {\n    //   var self = this;\n    //   var config = {skipRetryBrowserError: true, skipHTTP401Handling: true};\n    //   ERMrest.configure(Axios, Q);\n    //   ERMrest.onload().then(function () {\n    //       ERMrest.appLinkFn(function appTagToURL(tag, location, context) {\n    //           var appPath;\n    //           if (tag && (tag in appTagMapping)) {\n    //               appPath = appTagMapping[tag];\n    //           } else {\n    //               function getValueFromContext(object, context) {\n    //                   var partial = context,\n    //                   parts = context.split(\"/\");\n    //                   while (partial !== \"\") {\n    //                       if (partial in object) { // found the context\n    //                           return object[partial];\n    //                       }\n    //                       parts.splice(-1,1); // remove the last part\n    //                       partial = parts.join(\"/\");\n    //                   }\n    //                   return object[\"*\"];\n    //               }\n    //\n    //               const appContextMapping = {\n    //                   detailed: \"/record\",\n    //                   compact: \"/recordset\",\n    //                   edit: \"/recordedit\",\n    //                   entry: \"/recordedit\"\n    //               }\n    //               appContextMapping['*'] = \"/record\";\n    //\n    //               appPath = getValueFromContext(appContextMapping, context);\n    //           }\n    //\n    //           var url = \"https://dev.isrd.isi.edu/~jchudy/chaise\" + appPath + \"/#\" + location.catalog + \"/\" + location.path;\n    //           var pcontext = [];\n    //\n    //           // var settingsObj = ConfigUtils.getSettings()\n    //           var settingsObj = {};\n    //           // var contextHeaderParams = ConfigUtils.getContextHeaderParams();\n    //           var contextHeaderParams = {};\n    //           pcontext.push(\"pcid=\" + contextHeaderParams.cid);\n    //           pcontext.push(\"ppid=\" + contextHeaderParams.pid);\n    //           // only add the value to the applink function if it's true\n    //           if (settingsObj.hideNavbar) pcontext.push(\"hideNavbar=\" + settingsObj.hideNavbar)\n    //\n    //           // TODO we might want to allow only certian query parameters\n    //           if (location.queryParamsString) {\n    //               url = url + \"?\" + location.queryParamsString;\n    //           }\n    //           if (pcontext.length > 0) {\n    //               url = url + (location.queryParamsString ? \"&\" : \"?\") + pcontext.join(\"&\");\n    //           }\n    //           return url;\n    //       });\n    //\n    //       return ERMrest.resolve(\"https://dev.isrd.isi.edu/ermrest/catalog/1/entity/isa:dataset\", config);\n    //   }).then(function (reference) {\n    //       var ref = reference.contextualize.compact\n    //       console.log(self)\n    //       dispatch(setReference(ref))\n    //\n    //       self.setState({\n    //           reference: ref\n    //       });\n    //\n    //       return self.state.reference.read(25);\n    //   }).then(function (page) {\n    //\n    //       self.setState({\n    //           page: page,\n    //           tuples: page.tuples,\n    //           isLoaded: true\n    //       });\n    //\n    //       console.log(\"Table state: \", self.state);\n    //   }).catch(function (err) {\n    //       console.log(err)\n    //   });\n    // }\n    //\n    // componentDidUpdate(prevProps, prevState, snapshot) {\n    //     // console.log(\"Recordset did update\")\n    //     // console.log(\"prev props: \", prevProps);\n    //     // console.log(\"prev state: \", prevState);\n    // }\n    //\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     console.log(\"recordset next props: \", nextProps)\n    //     console.log(\"recordset next state: \", nextState)\n    //     var referenceChanged = this.state.reference != nextState.reference\n    //     var pageChanged = this.state.page != nextState.page\n    //     console.log(\"reference change: \", referenceChanged);\n    //     console.log(\"page change: \", pageChanged);\n    //     return referenceChanged || pageChanged\n    // }\n    //\n    const renderDisplayName = () => {\n        if (isLoaded) {\n            var displaynameObj = reference.displayname;\n            return (<h2>\n                {displaynameObj.isHTML\n                    ? <span className=\"markdown-container\" dangerouslySetInnerHTML={{ __html: displaynameObj.value }}></span>\n                    : <span>{displaynameObj.value}</span>\n                }\n              </h2>)\n        }\n    }\n\n\n    // <RecordsetTable className=\"recordset-table-container\" />\n    return(<div>\n        {renderDisplayName()}\n        <TableHeader style={{margin: \"10px 0\"}} reference={reference} />\n        </div>);\n}\n\nexport default Recordset;\n"]},"metadata":{},"sourceType":"module"}